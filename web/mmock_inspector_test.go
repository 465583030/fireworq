// Generated by running the following command and fixed the type
// signatures to resolve external packages:
//   mockgen -source ../jobqueue/inspector.go -destination mmock_inspector_test.go -package web
// i.e., the following command with
// https://github.com/golang/mock/pull/38 merged should generate the
// same thing:
//   mockgen -source ../jobqueue/inspector.go -destination mmock_inspector_test.go -package web -source_package jobqueue
package web

import (
	reflect "reflect"

	"github.com/fireworq/fireworq/jobqueue"

	gomock "github.com/golang/mock/gomock"
)

// MockInspector is a mock of Inspector interface
type MockInspector struct {
	ctrl     *gomock.Controller
	recorder *MockInspectorMockRecorder
}

// MockInspectorMockRecorder is the mock recorder for MockInspector
type MockInspectorMockRecorder struct {
	mock *MockInspector
}

// NewMockInspector creates a new mock instance
func NewMockInspector(ctrl *gomock.Controller) *MockInspector {
	mock := &MockInspector{ctrl: ctrl}
	mock.recorder = &MockInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInspector) EXPECT() *MockInspectorMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockInspector) Delete(jobID uint64) error {
	ret := m.ctrl.Call(m, "Delete", jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockInspectorMockRecorder) Delete(jobID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInspector)(nil).Delete), jobID)
}

// Find mocks base method
func (m *MockInspector) Find(jobID uint64) (*jobqueue.InspectedJob, error) {
	ret := m.ctrl.Call(m, "Find", jobID)
	ret0, _ := ret[0].(*jobqueue.InspectedJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockInspectorMockRecorder) Find(jobID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInspector)(nil).Find), jobID)
}

// FindAllGrabbed mocks base method
func (m *MockInspector) FindAllGrabbed(limit uint, cursor string) (*jobqueue.InspectedJobs, error) {
	ret := m.ctrl.Call(m, "FindAllGrabbed", limit, cursor)
	ret0, _ := ret[0].(*jobqueue.InspectedJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGrabbed indicates an expected call of FindAllGrabbed
func (mr *MockInspectorMockRecorder) FindAllGrabbed(limit, cursor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGrabbed", reflect.TypeOf((*MockInspector)(nil).FindAllGrabbed), limit, cursor)
}

// FindAllWaiting mocks base method
func (m *MockInspector) FindAllWaiting(limit uint, cursor string) (*jobqueue.InspectedJobs, error) {
	ret := m.ctrl.Call(m, "FindAllWaiting", limit, cursor)
	ret0, _ := ret[0].(*jobqueue.InspectedJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWaiting indicates an expected call of FindAllWaiting
func (mr *MockInspectorMockRecorder) FindAllWaiting(limit, cursor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWaiting", reflect.TypeOf((*MockInspector)(nil).FindAllWaiting), limit, cursor)
}

// FindAllDeferred mocks base method
func (m *MockInspector) FindAllDeferred(limit uint, cursor string) (*jobqueue.InspectedJobs, error) {
	ret := m.ctrl.Call(m, "FindAllDeferred", limit, cursor)
	ret0, _ := ret[0].(*jobqueue.InspectedJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDeferred indicates an expected call of FindAllDeferred
func (mr *MockInspectorMockRecorder) FindAllDeferred(limit, cursor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDeferred", reflect.TypeOf((*MockInspector)(nil).FindAllDeferred), limit, cursor)
}

// MockHasInspector is a mock of HasInspector interface
type MockHasInspector struct {
	ctrl     *gomock.Controller
	recorder *MockHasInspectorMockRecorder
}

// MockHasInspectorMockRecorder is the mock recorder for MockHasInspector
type MockHasInspectorMockRecorder struct {
	mock *MockHasInspector
}

// NewMockHasInspector creates a new mock instance
func NewMockHasInspector(ctrl *gomock.Controller) *MockHasInspector {
	mock := &MockHasInspector{ctrl: ctrl}
	mock.recorder = &MockHasInspectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasInspector) EXPECT() *MockHasInspectorMockRecorder {
	return m.recorder
}

// Inspector mocks base method
func (m *MockHasInspector) Inspector() jobqueue.Inspector {
	ret := m.ctrl.Call(m, "Inspector")
	ret0, _ := ret[0].(jobqueue.Inspector)
	return ret0
}

// Inspector indicates an expected call of Inspector
func (mr *MockHasInspectorMockRecorder) Inspector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspector", reflect.TypeOf((*MockHasInspector)(nil).Inspector))
}

// MockFailureLog is a mock of FailureLog interface
type MockFailureLog struct {
	ctrl     *gomock.Controller
	recorder *MockFailureLogMockRecorder
}

// MockFailureLogMockRecorder is the mock recorder for MockFailureLog
type MockFailureLogMockRecorder struct {
	mock *MockFailureLog
}

// NewMockFailureLog creates a new mock instance
func NewMockFailureLog(ctrl *gomock.Controller) *MockFailureLog {
	mock := &MockFailureLog{ctrl: ctrl}
	mock.recorder = &MockFailureLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFailureLog) EXPECT() *MockFailureLogMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockFailureLog) Add(failed jobqueue.Job, result *jobqueue.Result) error {
	ret := m.ctrl.Call(m, "Add", failed, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockFailureLogMockRecorder) Add(failed, result interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFailureLog)(nil).Add), failed, result)
}

// Delete mocks base method
func (m *MockFailureLog) Delete(failureID uint64) error {
	ret := m.ctrl.Call(m, "Delete", failureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFailureLogMockRecorder) Delete(failureID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFailureLog)(nil).Delete), failureID)
}

// Find mocks base method
func (m *MockFailureLog) Find(failureID uint64) (*jobqueue.FailedJob, error) {
	ret := m.ctrl.Call(m, "Find", failureID)
	ret0, _ := ret[0].(*jobqueue.FailedJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFailureLogMockRecorder) Find(failureID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFailureLog)(nil).Find), failureID)
}

// FindAll mocks base method
func (m *MockFailureLog) FindAll(limit uint, cursor string) (*jobqueue.FailedJobs, error) {
	ret := m.ctrl.Call(m, "FindAll", limit, cursor)
	ret0, _ := ret[0].(*jobqueue.FailedJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockFailureLogMockRecorder) FindAll(limit, cursor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFailureLog)(nil).FindAll), limit, cursor)
}

// FindAllRecentFailures mocks base method
func (m *MockFailureLog) FindAllRecentFailures(limit uint, cursor string) (*jobqueue.FailedJobs, error) {
	ret := m.ctrl.Call(m, "FindAllRecentFailures", limit, cursor)
	ret0, _ := ret[0].(*jobqueue.FailedJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRecentFailures indicates an expected call of FindAllRecentFailures
func (mr *MockFailureLogMockRecorder) FindAllRecentFailures(limit, cursor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRecentFailures", reflect.TypeOf((*MockFailureLog)(nil).FindAllRecentFailures), limit, cursor)
}

// MockHasFailureLog is a mock of HasFailureLog interface
type MockHasFailureLog struct {
	ctrl     *gomock.Controller
	recorder *MockHasFailureLogMockRecorder
}

// MockHasFailureLogMockRecorder is the mock recorder for MockHasFailureLog
type MockHasFailureLogMockRecorder struct {
	mock *MockHasFailureLog
}

// NewMockHasFailureLog creates a new mock instance
func NewMockHasFailureLog(ctrl *gomock.Controller) *MockHasFailureLog {
	mock := &MockHasFailureLog{ctrl: ctrl}
	mock.recorder = &MockHasFailureLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasFailureLog) EXPECT() *MockHasFailureLogMockRecorder {
	return m.recorder
}

// FailureLog mocks base method
func (m *MockHasFailureLog) FailureLog() jobqueue.FailureLog {
	ret := m.ctrl.Call(m, "FailureLog")
	ret0, _ := ret[0].(jobqueue.FailureLog)
	return ret0
}

// FailureLog indicates an expected call of FailureLog
func (mr *MockHasFailureLogMockRecorder) FailureLog() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailureLog", reflect.TypeOf((*MockHasFailureLog)(nil).FailureLog))
}
